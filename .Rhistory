head(mtcars)
debugSource("~/R_Analysis folder/01_Demo/demo1.R", echo=TRUE)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
library(tidyverse)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
setwd("~/R_Analysis folder/01_Demo")
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
View(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
scatter
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
Miles_Driven
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
View(used_matrix)
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
View(model)
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
g
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
?chisq.test()
chisq.test(tbl) #compare categorical distributions
library(tidyverse)
MechaCar_mpg <- read.csv('Resources/MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
setwd("~/Erics_document/UT/Module_15/MechaCar_Statistical_Analysis")
MechaCar_mpg <- read.csv('Resources/MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
View(MechaCar_mpg)
MechaCar_mpg <- read.csv('Resources/MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
View(MechaCar_mpg)
head(MechaCar_mpg)
library(dplyr)
lm(qsec ~ hp,mtcars) #create linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
#perform linear regression using lm function
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data =MechaCar_mpg)
#determine p-value and r-squared value
summary(MechaCar_mpg)
#determine p-value and r-squared value and save  in GitHub repository
summary(MechaCar_mpg)
#import and read csv
MechaCar <- read.csv('Resources/MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
head(MechaCar_mpg)
#perform linear regression using lm function
MechaCar_lm = lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data =MechaCar)
#load dplyr package
library(dplyr)
#import and read csv
MechaCar <- read.csv('Resources/MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
head(MechaCar_mpg)
#perform linear regression using lm function
MechaCar_lm = lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data =MechaCar)
#determine p-value and r-squared value and save  in GitHub repository
summary(MechaCar_lm)
#import and read csv
MechaCar <- read.csv('Resources/Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
View(MechaCar_lm)
View(MechaCar)
#import and read csv
MechaCar <- read.csv('Resources/MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
#import and read csv
Suspension_Coil <- read.csv('Resources/Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
View(MechaCar)
View(Suspension_Coil)
#using summarize function
total_summary = summarize(Suspension_Coil)
View(total_summary)
#using summarize function
total_summary = summarize(Suspension_Coil)
View(total_summary)
#using summarize function
total_summary <-  Suspension_Coil
#using summarize function
total_summary <-  Suspension_Coil %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI)))
View(Suspension_Coil)
#using summarize function
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(total_summary)
#create dataframe
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI), groups = 'keep')
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI), Num_Coil=n())
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot, add = FALSE) %>% summarize(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI))
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot, .add = FALSE) %>% summarize(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
View(lot_summary)
(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI))
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot, .drop = FALSE) %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot, .drop = TRUE) %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot, .add = TRUE) %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot, Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot, Lot) %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
#create dataframe based on Manufacutring_lot by using group_by functoin
lot_summary <- Suspension_Coil %>% group_by(Lot) %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
View(lot_summary)
#using summarize function
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
#create dataframe based on Manufacutring_lot by using group_by function
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
distinct(lot_summary)
View(lot_summary)
View(lot_summary)
distinct(lot_summary, .keep_all=True)
#create dataframe based on Manufacturing_lot by using group_by function
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=(PSI),Variance=var(PSI),SD=sd(PSI))
?t.test()
#perform t-test for all Los
t.test(Suspension_Coil$PSI, mu=1500)
# Peform t-test on Lot 1
t.test(subset(Suspension_Coil,Manufacturing_Lot=="Lot1")$PSI,mu = 1500)
# Peform t-test on Lot 2
t.test(subset(Suspension_Coil,Manufacturing_Lot=="Lot2")$PSI,mu = 1500)
# Peform t-test on Lot 3
t.test(subset(Suspension_Coil,Manufacturing_Lot=="Lot3")$PSI,mu = 1500)
#using summarize function
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep'))
#create dataframe based on Manufacturing_lot by using group_by function
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
i
#using summarize function
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI),Median=(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
#create dataframe based on Manufacturing_lot by using group_by function
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),
Median=(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(MechaCar)
View(lot_summary)
